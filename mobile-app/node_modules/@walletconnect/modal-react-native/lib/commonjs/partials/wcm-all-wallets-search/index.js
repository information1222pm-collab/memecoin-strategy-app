"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AllWalletsSearch = AllWalletsSearch;
var _reactNative = require("react-native");
var _valtio = require("valtio");
var _ApiCtrl = require("../../controllers/ApiCtrl");
var _useTheme = _interopRequireDefault(require("../../hooks/useTheme"));
var _WalletItem = _interopRequireWildcard(require("../../components/WalletItem"));
var _AssetUtil = require("../../utils/AssetUtil");
var _ConfigCtrl = require("../../controllers/ConfigCtrl");
var _styles = _interopRequireDefault(require("./styles"));
var _WalletItemLoader = require("../../components/WalletItemLoader");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function AllWalletsSearch(_ref) {
  let {
    columns,
    itemWidth,
    windowHeight,
    themeMode,
    isPortrait,
    onWalletPress,
    loading
  } = _ref;
  const {
    search
  } = (0, _valtio.useSnapshot)(_ApiCtrl.ApiCtrl.state);
  const {
    recentWallet
  } = (0, _valtio.useSnapshot)(_ConfigCtrl.ConfigCtrl.state);
  const Theme = (0, _useTheme.default)();
  const loadingTemplate = items => {
    return /*#__PURE__*/React.createElement(_reactNative.View, {
      style: [_styles.default.loaderContainer, {
        height: Math.round(windowHeight * 0.6)
      }]
    }, Array.from({
      length: items
    }).map((_, index) => /*#__PURE__*/React.createElement(_WalletItemLoader.WalletItemLoader, {
      key: index,
      style: {
        marginBottom: _WalletItem.WALLET_MARGIN * 2,
        width: itemWidth
      }
    })));
  };
  const emptyTemplate = () => {
    return /*#__PURE__*/React.createElement(_reactNative.View, {
      style: [_styles.default.emptyContainer, {
        height: Math.round(windowHeight * 0.6)
      }]
    }, /*#__PURE__*/React.createElement(_reactNative.Text, {
      style: [_styles.default.emptyText, {
        color: Theme.foreground2
      }]
    }, "No results found"));
  };
  const renderWallet = _ref2 => {
    let {
      item
    } = _ref2;
    return /*#__PURE__*/React.createElement(_WalletItem.default, {
      id: item.id,
      name: item.name,
      isRecent: item.id === (recentWallet === null || recentWallet === void 0 ? void 0 : recentWallet.id),
      onPress: () => onWalletPress(item),
      imageUrl: _AssetUtil.AssetUtil.getWalletImage(item),
      style: {
        width: itemWidth
      }
    });
  };
  if (loading) {
    return loadingTemplate(20);
  }
  return /*#__PURE__*/React.createElement(_reactNative.FlatList, {
    data: search,
    style: {
      height: Math.round(windowHeight * 0.6),
      backgroundColor: Theme.background1
    },
    contentContainerStyle: _styles.default.listContentContainer,
    indicatorStyle: themeMode === 'dark' ? 'white' : 'black',
    showsVerticalScrollIndicator: true,
    numColumns: columns,
    fadingEdgeLength: 20,
    ListEmptyComponent: emptyTemplate(),
    key: isPortrait ? 'portrait' : 'landscape',
    getItemLayout: (_data, index) => ({
      length: _WalletItem.WALLET_FULL_HEIGHT,
      offset: _WalletItem.WALLET_FULL_HEIGHT * index,
      index
    }),
    renderItem: renderWallet
  });
}
//# sourceMappingURL=index.js.map