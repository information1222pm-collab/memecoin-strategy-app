"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CoreHelperUtil = void 0;
var _reactNative = require("react-native");
var _ConstantsUtil = require("./ConstantsUtil");
// -- Helpers -----------------------------------------------------------------
async function isAppInstalledIos(deepLink) {
  try {
    return deepLink ? _reactNative.Linking.canOpenURL(deepLink) : Promise.resolve(false);
  } catch (error) {
    return Promise.resolve(false);
  }
}
async function isAppInstalledAndroid(packageName) {
  try {
    var _global, _global$Application, _global2, _global2$Application;
    if (!packageName ||
    //@ts-ignore
    typeof ((_global = global) === null || _global === void 0 ? void 0 : (_global$Application = _global.Application) === null || _global$Application === void 0 ? void 0 : _global$Application.isAppInstalled) !== 'function') {
      return Promise.resolve(false);
    }

    //@ts-ignore
    return (_global2 = global) === null || _global2 === void 0 ? void 0 : (_global2$Application = _global2.Application) === null || _global2$Application === void 0 ? void 0 : _global2$Application.isAppInstalled(packageName);
  } catch (error) {
    return Promise.resolve(false);
  }
}
const CoreHelperUtil = {
  isPairingExpired(expiry) {
    return expiry ? expiry - Date.now() <= _ConstantsUtil.ConstantsUtil.TEN_SEC_MS : true;
  },
  isAllowedRetry(lastRetry) {
    return Date.now() - lastRetry >= _ConstantsUtil.ConstantsUtil.ONE_SEC_MS;
  },
  getPairingExpiry() {
    return Date.now() + _ConstantsUtil.ConstantsUtil.FOUR_MINUTES_MS;
  },
  getPlainAddress(caipAddress) {
    return caipAddress.split(':')[2];
  },
  async wait(milliseconds) {
    return new Promise(resolve => {
      setTimeout(resolve, milliseconds);
    });
  },
  debounce(func) {
    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
    let timer;
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      function next() {
        func(...args);
      }
      if (timer) {
        clearTimeout(timer);
      }
      timer = setTimeout(next, timeout);
    };
  },
  isHttpUrl(url) {
    return url.startsWith('http://') || url.startsWith('https://');
  },
  formatNativeUrl(appUrl, wcUri) {
    if (CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatUniversalUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    if (!safeAppUrl.includes('://')) {
      safeAppUrl = appUrl.replaceAll('/', '').replaceAll(':', '');
      safeAppUrl = `${safeAppUrl}://`;
    }
    if (!safeAppUrl.endsWith('/')) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return `${safeAppUrl}wc?uri=${encodedWcUrl}`;
  },
  formatUniversalUrl(appUrl, wcUri) {
    if (!CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatNativeUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    if (!safeAppUrl.endsWith('/')) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return `${safeAppUrl}wc?uri=${encodedWcUrl}`;
  },
  openLink(url) {
    return _reactNative.Linking.openURL(url);
  },
  formatBalance(balance, symbol) {
    let decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;
    let formattedBalance;
    if (balance === '0') {
      formattedBalance = '0.000';
    } else if (typeof balance === 'string') {
      const number = Number(balance);
      if (number) {
        var _number$toString$matc;
        const regex = new RegExp(`^-?\\d+(?:\\.\\d{0,${decimals}})?`, 'u');
        formattedBalance = (_number$toString$matc = number.toString().match(regex)) === null || _number$toString$matc === void 0 ? void 0 : _number$toString$matc[0];
      }
    }
    return formattedBalance ? `${formattedBalance} ${symbol}` : '0.000';
  },
  isRestrictedRegion() {
    try {
      const {
        timeZone
      } = new Intl.DateTimeFormat().resolvedOptions();
      const capTimeZone = timeZone.toUpperCase();
      return _ConstantsUtil.ConstantsUtil.RESTRICTED_TIMEZONES.includes(capTimeZone);
    } catch {
      return false;
    }
  },
  getApiUrl() {
    return CoreHelperUtil.isRestrictedRegion() ? 'https://api.web3modal.org' : 'https://api.web3modal.com';
  },
  getBlockchainApiUrl() {
    return CoreHelperUtil.isRestrictedRegion() ? 'https://rpc.walletconnect.org' : 'https://rpc.walletconnect.com';
  },
  async checkInstalled(wallet) {
    let isInstalled = false;
    const scheme = wallet.ios_schema;
    const appId = wallet.android_app_id;
    try {
      isInstalled = await _reactNative.Platform.select({
        ios: isAppInstalledIos(scheme),
        android: isAppInstalledAndroid(appId),
        default: Promise.resolve(false)
      });
    } catch {
      isInstalled = false;
    }
    return isInstalled;
  },
  isArray(data) {
    return Array.isArray(data) && data.length > 0;
  }
};
exports.CoreHelperUtil = CoreHelperUtil;
//# sourceMappingURL=CoreHelperUtil.js.map