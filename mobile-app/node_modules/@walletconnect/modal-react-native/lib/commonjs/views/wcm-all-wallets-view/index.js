"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _valtio = require("valtio");
var _wcmModalHeader = _interopRequireDefault(require("../../partials/wcm-modal-header"));
var _SearchBar = _interopRequireDefault(require("../../components/SearchBar"));
var _OptionsCtrl = require("../../controllers/OptionsCtrl");
var _WcConnectionCtrl = require("../../controllers/WcConnectionCtrl");
var _ThemeCtrl = require("../../controllers/ThemeCtrl");
var _RouterCtrl = require("../../controllers/RouterCtrl");
var _ApiCtrl = require("../../controllers/ApiCtrl");
var _useDebounceCallback = require("../../hooks/useDebounceCallback");
var _ConfigCtrl = require("../../controllers/ConfigCtrl");
var _wcmAllWalletsSearch = require("../../partials/wcm-all-wallets-search");
var _wcmAllWalletsList = require("../../partials/wcm-all-wallets-list");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function AllWalletsView(_ref) {
  let {
    isPortrait,
    windowHeight,
    windowWidth
  } = _ref;
  const {
    isDataLoaded
  } = (0, _valtio.useSnapshot)(_OptionsCtrl.OptionsCtrl.state);
  const {
    pairingUri
  } = (0, _valtio.useSnapshot)(_WcConnectionCtrl.WcConnectionCtrl.state);
  const {
    themeMode
  } = (0, _valtio.useSnapshot)(_ThemeCtrl.ThemeCtrl.state);
  const {
    recentWallet
  } = (0, _valtio.useSnapshot)(_ConfigCtrl.ConfigCtrl.state);
  const {
    wallets,
    recommended,
    installed,
    count,
    page
  } = (0, _valtio.useSnapshot)(_ApiCtrl.ApiCtrl.state);
  const shouldLoadWallets = wallets.length === 0;
  const [walletsLoading, setWalletsLoading] = (0, _react.useState)(false);
  const loading = !isDataLoaded || !pairingUri || walletsLoading;
  const [searchValue, setSearch] = (0, _react.useState)('');
  const [pageLoading, setPageLoading] = (0, _react.useState)(false);
  const [searchLoading, setSearchLoading] = (0, _react.useState)(false);
  const columns = isPortrait ? 4 : 7;
  const itemWidth = Math.trunc(windowWidth / columns);
  const filterOutRecentWallet = list => {
    if (!recentWallet) return list;
    const filtered = list.filter(wallet => wallet.id !== recentWallet.id);
    return filtered;
  };
  const walletList = recentWallet ? [recentWallet, ...filterOutRecentWallet([...installed, ...recommended, ...wallets])] : filterOutRecentWallet([...installed, ...recommended, ...wallets]);
  const searchWallets = (0, _react.useCallback)(async value => {
    setSearch(value);
    if (value.length > 0) {
      setSearchLoading(true);
      await _ApiCtrl.ApiCtrl.searchWallet({
        search: value
      });
      setSearchLoading(false);
    }
  }, []);
  const fetchNextPage = async () => {
    if (walletList.length < count && !pageLoading) {
      setPageLoading(true);
      await _ApiCtrl.ApiCtrl.fetchWallets({
        page: page + 1
      });
      setPageLoading(false);
    }
  };
  const onWalletPress = wallet => {
    _RouterCtrl.RouterCtrl.push('Connecting', {
      wallet
    });
  };
  const walletListTemplate = () => {
    if (searchValue.length > 0) {
      return /*#__PURE__*/React.createElement(_wcmAllWalletsSearch.AllWalletsSearch, {
        loading: searchLoading,
        columns: columns,
        itemWidth: itemWidth,
        windowHeight: windowHeight,
        isPortrait: isPortrait,
        onWalletPress: onWalletPress,
        themeMode: themeMode
      });
    }
    return /*#__PURE__*/React.createElement(_wcmAllWalletsList.AllWalletsList, {
      loading: loading,
      columns: columns,
      itemWidth: itemWidth,
      windowHeight: windowHeight,
      isPortrait: isPortrait,
      onWalletPress: onWalletPress,
      themeMode: themeMode,
      onFetchNextPage: fetchNextPage,
      list: walletList
    });
  };
  const onChangeText = (0, _useDebounceCallback.useDebounceCallback)({
    callback: searchWallets
  });
  (0, _react.useEffect)(() => {
    async function getWallets() {
      if (shouldLoadWallets) {
        setWalletsLoading(true);
        await _ApiCtrl.ApiCtrl.fetchWallets({
          page: 1
        });
        setWalletsLoading(false);
      }
    }
    getWallets();
  }, [shouldLoadWallets]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_wcmModalHeader.default, {
    shadow: true
  }, /*#__PURE__*/React.createElement(_SearchBar.default, {
    onChangeText: onChangeText,
    style: _styles.default.searchbar
  })), walletListTemplate());
}
var _default = AllWalletsView;
exports.default = _default;
//# sourceMappingURL=index.js.map