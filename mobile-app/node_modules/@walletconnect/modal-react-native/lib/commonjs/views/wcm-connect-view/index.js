"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _valtio = require("valtio");
var _WalletItem = _interopRequireWildcard(require("../../components/WalletItem"));
var _ViewAllBox = _interopRequireDefault(require("../../components/ViewAllBox"));
var _QRCode = _interopRequireDefault(require("../../assets/QRCode"));
var _wcmModalHeader = _interopRequireDefault(require("../../partials/wcm-modal-header"));
var _RouterCtrl = require("../../controllers/RouterCtrl");
var _OptionsCtrl = require("../../controllers/OptionsCtrl");
var _WcConnectionCtrl = require("../../controllers/WcConnectionCtrl");
var _ConfigCtrl = require("../../controllers/ConfigCtrl");
var _ApiCtrl = require("../../controllers/ApiCtrl");
var _useTheme = _interopRequireDefault(require("../../hooks/useTheme"));
var _AssetUtil = require("../../utils/AssetUtil");
var _WalletItemLoader = require("../../components/WalletItemLoader");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ConnectView(_ref) {
  let {
    isPortrait
  } = _ref;
  const Theme = (0, _useTheme.default)();
  const {
    isDataLoaded
  } = (0, _valtio.useSnapshot)(_OptionsCtrl.OptionsCtrl.state);
  const {
    pairingUri
  } = (0, _valtio.useSnapshot)(_WcConnectionCtrl.WcConnectionCtrl.state);
  const {
    explorerExcludedWalletIds
  } = (0, _valtio.useSnapshot)(_ConfigCtrl.ConfigCtrl.state);
  const {
    recentWallet
  } = (0, _valtio.useSnapshot)(_ConfigCtrl.ConfigCtrl.state);
  const {
    recommended,
    installed
  } = (0, _valtio.useSnapshot)(_ApiCtrl.ApiCtrl.state);
  const loading = !isDataLoaded || !pairingUri;
  const viewHeight = isPortrait ? _WalletItem.WALLET_FULL_HEIGHT * 2 : _WalletItem.WALLET_FULL_HEIGHT;
  const showViewAllButton = installed.length + recommended.length >= 8 || explorerExcludedWalletIds !== 'ALL';
  const viewAllTemplate = () => {
    if (!showViewAllButton) return null;
    return /*#__PURE__*/React.createElement(_ViewAllBox.default, {
      onPress: () => _RouterCtrl.RouterCtrl.push('WalletExplorer'),
      wallets: recommended.slice(-4),
      style: isPortrait ? _styles.default.portraitItem : _styles.default.landscapeItem
    });
  };
  const filterOutRecentWallet = wallets => {
    if (!recentWallet) return wallets;
    const filtered = wallets.filter(wallet => wallet.id !== recentWallet.id);
    return filtered;
  };
  const loadingTemplate = items => {
    return /*#__PURE__*/React.createElement(_reactNative.View, {
      style: [_styles.default.loaderContainer, {
        height: viewHeight
      }]
    }, Array.from({
      length: items
    }).map((_, index) => /*#__PURE__*/React.createElement(_WalletItemLoader.WalletItemLoader, {
      key: index,
      style: [isPortrait ? _styles.default.portraitItem : _styles.default.landscapeItem, {
        marginBottom: _WalletItem.WALLET_MARGIN * 2
      }]
    })));
  };
  const walletTemplate = () => {
    const list = recentWallet ? [recentWallet, ...filterOutRecentWallet([...installed, ...recommended])] : filterOutRecentWallet([...installed, ...recommended]);
    return list.slice(0, showViewAllButton ? 7 : 8).map(item => /*#__PURE__*/React.createElement(_WalletItem.default, {
      name: item.name,
      id: item.id,
      imageUrl: _AssetUtil.AssetUtil.getWalletImage(item),
      onPress: () => _RouterCtrl.RouterCtrl.push('Connecting', {
        wallet: item
      }),
      key: item.id,
      isRecent: item.id === (recentWallet === null || recentWallet === void 0 ? void 0 : recentWallet.id),
      style: isPortrait ? _styles.default.portraitItem : _styles.default.landscapeItem
    }));
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_wcmModalHeader.default, {
    title: "Connect your wallet",
    onActionPress: () => _RouterCtrl.RouterCtrl.push('Qrcode'),
    actionIcon: /*#__PURE__*/React.createElement(_QRCode.default, {
      width: 22,
      height: 22,
      fill: Theme.accent
    })
  }), loading ? loadingTemplate(8) : /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [_styles.default.explorerContainer, {
      height: viewHeight,
      backgroundColor: Theme.background1
    }]
  }, walletTemplate(), viewAllTemplate()));
}
var _default = ConnectView;
exports.default = _default;
//# sourceMappingURL=index.js.map