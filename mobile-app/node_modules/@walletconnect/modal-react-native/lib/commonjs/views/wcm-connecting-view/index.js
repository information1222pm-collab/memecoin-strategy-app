"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _valtio = require("valtio");
var _wcmModalHeader = _interopRequireDefault(require("../../partials/wcm-modal-header"));
var _CopyLarge = _interopRequireDefault(require("../../assets/CopyLarge"));
var _useTheme = _interopRequireDefault(require("../../hooks/useTheme"));
var _ToastCtrl = require("../../controllers/ToastCtrl");
var _WcConnectionCtrl = require("../../controllers/WcConnectionCtrl");
var _Text = _interopRequireDefault(require("../../components/Text"));
var _RouterCtrl = require("../../controllers/RouterCtrl");
var _Touchable = _interopRequireDefault(require("../../components/Touchable"));
var _UiUtil = require("../../utils/UiUtil");
var _Retry = _interopRequireDefault(require("../../assets/Retry"));
var _WalletImage = _interopRequireDefault(require("../../components/WalletImage"));
var _WalletLoadingThumbnail = _interopRequireDefault(require("../../components/WalletLoadingThumbnail"));
var _Chevron = _interopRequireDefault(require("../../assets/Chevron"));
var _CoreHelperUtil = require("../../utils/CoreHelperUtil");
var _StorageUtil = require("../../utils/StorageUtil");
var _AssetUtil = require("../../utils/AssetUtil");
var _ConfigCtrl = require("../../controllers/ConfigCtrl");
var _ApiCtrl = require("../../controllers/ApiCtrl");
var _styles = _interopRequireDefault(require("./styles"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ConnectingView(_ref) {
  var _data$wallet, _data$wallet3, _data$wallet4;
  let {
    onCopyClipboard
  } = _ref;
  const Theme = (0, _useTheme.default)();
  const {
    pairingUri,
    pairingError
  } = (0, _valtio.useSnapshot)(_WcConnectionCtrl.WcConnectionCtrl.state);
  const {
    data
  } = (0, _valtio.useSnapshot)(_RouterCtrl.RouterCtrl.state);
  const {
    installed
  } = (0, _valtio.useSnapshot)(_ApiCtrl.ApiCtrl.state);
  const walletName = _UiUtil.UiUtil.getWalletName((data === null || data === void 0 ? void 0 : (_data$wallet = data.wallet) === null || _data$wallet === void 0 ? void 0 : _data$wallet.name) ?? 'Wallet', true);
  const imageUrl = _AssetUtil.AssetUtil.getWalletImage(data === null || data === void 0 ? void 0 : data.wallet);
  const isInstalled = !!installed.find(item => {
    var _data$wallet2;
    return item.id === (data === null || data === void 0 ? void 0 : (_data$wallet2 = data.wallet) === null || _data$wallet2 === void 0 ? void 0 : _data$wallet2.id);
  });
  const storeLink = _reactNative.Platform.select({
    ios: data === null || data === void 0 ? void 0 : (_data$wallet3 = data.wallet) === null || _data$wallet3 === void 0 ? void 0 : _data$wallet3.app_store,
    android: data === null || data === void 0 ? void 0 : (_data$wallet4 = data.wallet) === null || _data$wallet4 === void 0 ? void 0 : _data$wallet4.play_store
  });
  const storeCaption = _reactNative.Platform.select({
    ios: 'App Store',
    android: 'Play Store'
  });
  const onCopy = async () => {
    if (onCopyClipboard) {
      onCopyClipboard(pairingUri);
      _ToastCtrl.ToastCtrl.openToast('Link copied', 'success');
    }
  };
  const onRetry = async () => {
    _WcConnectionCtrl.WcConnectionCtrl.setPairingError(false);
    onConnect();
  };
  const onConnect = (0, _react.useCallback)(async () => {
    try {
      var _data$wallet5, _data$wallet6, _data$wallet7;
      if (!(data !== null && data !== void 0 && (_data$wallet5 = data.wallet) !== null && _data$wallet5 !== void 0 && _data$wallet5.mobile_link)) return;
      const mobileLink = _CoreHelperUtil.CoreHelperUtil.formatNativeUrl(data === null || data === void 0 ? void 0 : (_data$wallet6 = data.wallet) === null || _data$wallet6 === void 0 ? void 0 : _data$wallet6.mobile_link, pairingUri);
      await _CoreHelperUtil.CoreHelperUtil.openLink(mobileLink);
      _ConfigCtrl.ConfigCtrl.setRecentWallet(data === null || data === void 0 ? void 0 : data.wallet);
      _StorageUtil.StorageUtil.setRecentWallet(data === null || data === void 0 ? void 0 : data.wallet);
      _StorageUtil.StorageUtil.setDeepLinkWallet(data === null || data === void 0 ? void 0 : (_data$wallet7 = data.wallet) === null || _data$wallet7 === void 0 ? void 0 : _data$wallet7.mobile_link);
    } catch (error) {
      _StorageUtil.StorageUtil.removeDeepLinkWallet();
      _ToastCtrl.ToastCtrl.openToast('Unable to open the wallet', 'error');
    }
  }, [data === null || data === void 0 ? void 0 : data.wallet, pairingUri]);
  const retryButtonTemplate = () => {
    return /*#__PURE__*/React.createElement(_reactNative.View, {
      style: [_styles.default.upperFooter, {
        borderColor: Theme.foreground3
      }]
    }, /*#__PURE__*/React.createElement(_Touchable.default, {
      style: [_styles.default.retryButton, {
        backgroundColor: Theme.accent
      }],
      onPress: onRetry
    }, /*#__PURE__*/React.createElement(_Text.default, {
      style: _styles.default.text
    }, "Retry"), /*#__PURE__*/React.createElement(_Retry.default, {
      style: _styles.default.retryIcon
    })));
  };
  const storeButtonTemplate = () => {
    if (!storeLink || isInstalled) return null;
    return /*#__PURE__*/React.createElement(_reactNative.View, {
      style: _styles.default.lowerFooter
    }, /*#__PURE__*/React.createElement(_reactNative.View, {
      style: _styles.default.row
    }, /*#__PURE__*/React.createElement(_WalletImage.default, {
      url: imageUrl,
      size: "sm"
    }), /*#__PURE__*/React.createElement(_Text.default, {
      style: [_styles.default.getText, {
        color: Theme.foreground1
      }]
    }, `Get ${walletName}`)), /*#__PURE__*/React.createElement(_Touchable.default, {
      style: _styles.default.row,
      onPress: () => _reactNative.Linking.openURL(storeLink)
    }, /*#__PURE__*/React.createElement(_Text.default, {
      style: [_styles.default.storeText, {
        color: Theme.foreground2
      }]
    }, storeCaption), /*#__PURE__*/React.createElement(_Chevron.default, {
      fill: Theme.foreground2,
      width: 6,
      style: _styles.default.storeIcon
    })));
  };
  (0, _react.useEffect)(() => {
    _WcConnectionCtrl.WcConnectionCtrl.setPairingError(false);
    onConnect();
  }, [onConnect]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_wcmModalHeader.default, {
    title: walletName,
    actionIcon: /*#__PURE__*/React.createElement(_CopyLarge.default, {
      width: 22,
      height: 22,
      fill: Theme.accent
    }),
    onActionPress: onCopyClipboard ? onCopy : undefined
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [_styles.default.walletContainer, {
      backgroundColor: Theme.background1
    }]
  }, /*#__PURE__*/React.createElement(_WalletLoadingThumbnail.default, {
    showError: pairingError
  }, /*#__PURE__*/React.createElement(_WalletImage.default, {
    url: imageUrl,
    size: "lg"
  })), /*#__PURE__*/React.createElement(_Text.default, {
    style: [_styles.default.continueText, {
      color: pairingError ? Theme.negative : Theme.foreground1
    }]
  }, pairingError ? 'Connection declined' : `Continue in ${walletName}...`)), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [_styles.default.footer, {
      backgroundColor: Theme.background2
    }]
  }, retryButtonTemplate(), storeButtonTemplate()));
}
var _default = ConnectingView;
exports.default = _default;
//# sourceMappingURL=index.js.map