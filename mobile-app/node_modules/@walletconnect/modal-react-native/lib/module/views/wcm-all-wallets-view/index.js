import { useCallback, useEffect, useState } from 'react';
import { useSnapshot } from 'valtio';
import ModalHeader from '../../partials/wcm-modal-header';
import SearchBar from '../../components/SearchBar';
import { OptionsCtrl } from '../../controllers/OptionsCtrl';
import { WcConnectionCtrl } from '../../controllers/WcConnectionCtrl';
import { ThemeCtrl } from '../../controllers/ThemeCtrl';
import { RouterCtrl } from '../../controllers/RouterCtrl';
import { ApiCtrl } from '../../controllers/ApiCtrl';
import { useDebounceCallback } from '../../hooks/useDebounceCallback';
import { ConfigCtrl } from '../../controllers/ConfigCtrl';
import { AllWalletsSearch } from '../../partials/wcm-all-wallets-search';
import { AllWalletsList } from '../../partials/wcm-all-wallets-list';
import styles from './styles';
function AllWalletsView(_ref) {
  let {
    isPortrait,
    windowHeight,
    windowWidth
  } = _ref;
  const {
    isDataLoaded
  } = useSnapshot(OptionsCtrl.state);
  const {
    pairingUri
  } = useSnapshot(WcConnectionCtrl.state);
  const {
    themeMode
  } = useSnapshot(ThemeCtrl.state);
  const {
    recentWallet
  } = useSnapshot(ConfigCtrl.state);
  const {
    wallets,
    recommended,
    installed,
    count,
    page
  } = useSnapshot(ApiCtrl.state);
  const shouldLoadWallets = wallets.length === 0;
  const [walletsLoading, setWalletsLoading] = useState(false);
  const loading = !isDataLoaded || !pairingUri || walletsLoading;
  const [searchValue, setSearch] = useState('');
  const [pageLoading, setPageLoading] = useState(false);
  const [searchLoading, setSearchLoading] = useState(false);
  const columns = isPortrait ? 4 : 7;
  const itemWidth = Math.trunc(windowWidth / columns);
  const filterOutRecentWallet = list => {
    if (!recentWallet) return list;
    const filtered = list.filter(wallet => wallet.id !== recentWallet.id);
    return filtered;
  };
  const walletList = recentWallet ? [recentWallet, ...filterOutRecentWallet([...installed, ...recommended, ...wallets])] : filterOutRecentWallet([...installed, ...recommended, ...wallets]);
  const searchWallets = useCallback(async value => {
    setSearch(value);
    if (value.length > 0) {
      setSearchLoading(true);
      await ApiCtrl.searchWallet({
        search: value
      });
      setSearchLoading(false);
    }
  }, []);
  const fetchNextPage = async () => {
    if (walletList.length < count && !pageLoading) {
      setPageLoading(true);
      await ApiCtrl.fetchWallets({
        page: page + 1
      });
      setPageLoading(false);
    }
  };
  const onWalletPress = wallet => {
    RouterCtrl.push('Connecting', {
      wallet
    });
  };
  const walletListTemplate = () => {
    if (searchValue.length > 0) {
      return /*#__PURE__*/React.createElement(AllWalletsSearch, {
        loading: searchLoading,
        columns: columns,
        itemWidth: itemWidth,
        windowHeight: windowHeight,
        isPortrait: isPortrait,
        onWalletPress: onWalletPress,
        themeMode: themeMode
      });
    }
    return /*#__PURE__*/React.createElement(AllWalletsList, {
      loading: loading,
      columns: columns,
      itemWidth: itemWidth,
      windowHeight: windowHeight,
      isPortrait: isPortrait,
      onWalletPress: onWalletPress,
      themeMode: themeMode,
      onFetchNextPage: fetchNextPage,
      list: walletList
    });
  };
  const onChangeText = useDebounceCallback({
    callback: searchWallets
  });
  useEffect(() => {
    async function getWallets() {
      if (shouldLoadWallets) {
        setWalletsLoading(true);
        await ApiCtrl.fetchWallets({
          page: 1
        });
        setWalletsLoading(false);
      }
    }
    getWallets();
  }, [shouldLoadWallets]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ModalHeader, {
    shadow: true
  }, /*#__PURE__*/React.createElement(SearchBar, {
    onChangeText: onChangeText,
    style: styles.searchbar
  })), walletListTemplate());
}
export default AllWalletsView;
//# sourceMappingURL=index.js.map