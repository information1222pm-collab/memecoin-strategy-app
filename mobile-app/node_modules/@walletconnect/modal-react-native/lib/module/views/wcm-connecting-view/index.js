import { useCallback, useEffect } from 'react';
import { Linking, Platform, View } from 'react-native';
import { useSnapshot } from 'valtio';
import ModalHeader from '../../partials/wcm-modal-header';
import CopyIcon from '../../assets/CopyLarge';
import useTheme from '../../hooks/useTheme';
import { ToastCtrl } from '../../controllers/ToastCtrl';
import { WcConnectionCtrl } from '../../controllers/WcConnectionCtrl';
import Text from '../../components/Text';
import { RouterCtrl } from '../../controllers/RouterCtrl';
import Touchable from '../../components/Touchable';
import { UiUtil } from '../../utils/UiUtil';
import RetryIcon from '../../assets/Retry';
import WalletImage from '../../components/WalletImage';
import WalletLoadingThumbnail from '../../components/WalletLoadingThumbnail';
import Chevron from '../../assets/Chevron';
import { CoreHelperUtil } from '../../utils/CoreHelperUtil';
import { StorageUtil } from '../../utils/StorageUtil';
import { AssetUtil } from '../../utils/AssetUtil';
import { ConfigCtrl } from '../../controllers/ConfigCtrl';
import { ApiCtrl } from '../../controllers/ApiCtrl';
import styles from './styles';
function ConnectingView(_ref) {
  var _data$wallet, _data$wallet3, _data$wallet4;
  let {
    onCopyClipboard
  } = _ref;
  const Theme = useTheme();
  const {
    pairingUri,
    pairingError
  } = useSnapshot(WcConnectionCtrl.state);
  const {
    data
  } = useSnapshot(RouterCtrl.state);
  const {
    installed
  } = useSnapshot(ApiCtrl.state);
  const walletName = UiUtil.getWalletName((data === null || data === void 0 ? void 0 : (_data$wallet = data.wallet) === null || _data$wallet === void 0 ? void 0 : _data$wallet.name) ?? 'Wallet', true);
  const imageUrl = AssetUtil.getWalletImage(data === null || data === void 0 ? void 0 : data.wallet);
  const isInstalled = !!installed.find(item => {
    var _data$wallet2;
    return item.id === (data === null || data === void 0 ? void 0 : (_data$wallet2 = data.wallet) === null || _data$wallet2 === void 0 ? void 0 : _data$wallet2.id);
  });
  const storeLink = Platform.select({
    ios: data === null || data === void 0 ? void 0 : (_data$wallet3 = data.wallet) === null || _data$wallet3 === void 0 ? void 0 : _data$wallet3.app_store,
    android: data === null || data === void 0 ? void 0 : (_data$wallet4 = data.wallet) === null || _data$wallet4 === void 0 ? void 0 : _data$wallet4.play_store
  });
  const storeCaption = Platform.select({
    ios: 'App Store',
    android: 'Play Store'
  });
  const onCopy = async () => {
    if (onCopyClipboard) {
      onCopyClipboard(pairingUri);
      ToastCtrl.openToast('Link copied', 'success');
    }
  };
  const onRetry = async () => {
    WcConnectionCtrl.setPairingError(false);
    onConnect();
  };
  const onConnect = useCallback(async () => {
    try {
      var _data$wallet5, _data$wallet6, _data$wallet7;
      if (!(data !== null && data !== void 0 && (_data$wallet5 = data.wallet) !== null && _data$wallet5 !== void 0 && _data$wallet5.mobile_link)) return;
      const mobileLink = CoreHelperUtil.formatNativeUrl(data === null || data === void 0 ? void 0 : (_data$wallet6 = data.wallet) === null || _data$wallet6 === void 0 ? void 0 : _data$wallet6.mobile_link, pairingUri);
      await CoreHelperUtil.openLink(mobileLink);
      ConfigCtrl.setRecentWallet(data === null || data === void 0 ? void 0 : data.wallet);
      StorageUtil.setRecentWallet(data === null || data === void 0 ? void 0 : data.wallet);
      StorageUtil.setDeepLinkWallet(data === null || data === void 0 ? void 0 : (_data$wallet7 = data.wallet) === null || _data$wallet7 === void 0 ? void 0 : _data$wallet7.mobile_link);
    } catch (error) {
      StorageUtil.removeDeepLinkWallet();
      ToastCtrl.openToast('Unable to open the wallet', 'error');
    }
  }, [data === null || data === void 0 ? void 0 : data.wallet, pairingUri]);
  const retryButtonTemplate = () => {
    return /*#__PURE__*/React.createElement(View, {
      style: [styles.upperFooter, {
        borderColor: Theme.foreground3
      }]
    }, /*#__PURE__*/React.createElement(Touchable, {
      style: [styles.retryButton, {
        backgroundColor: Theme.accent
      }],
      onPress: onRetry
    }, /*#__PURE__*/React.createElement(Text, {
      style: styles.text
    }, "Retry"), /*#__PURE__*/React.createElement(RetryIcon, {
      style: styles.retryIcon
    })));
  };
  const storeButtonTemplate = () => {
    if (!storeLink || isInstalled) return null;
    return /*#__PURE__*/React.createElement(View, {
      style: styles.lowerFooter
    }, /*#__PURE__*/React.createElement(View, {
      style: styles.row
    }, /*#__PURE__*/React.createElement(WalletImage, {
      url: imageUrl,
      size: "sm"
    }), /*#__PURE__*/React.createElement(Text, {
      style: [styles.getText, {
        color: Theme.foreground1
      }]
    }, `Get ${walletName}`)), /*#__PURE__*/React.createElement(Touchable, {
      style: styles.row,
      onPress: () => Linking.openURL(storeLink)
    }, /*#__PURE__*/React.createElement(Text, {
      style: [styles.storeText, {
        color: Theme.foreground2
      }]
    }, storeCaption), /*#__PURE__*/React.createElement(Chevron, {
      fill: Theme.foreground2,
      width: 6,
      style: styles.storeIcon
    })));
  };
  useEffect(() => {
    WcConnectionCtrl.setPairingError(false);
    onConnect();
  }, [onConnect]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ModalHeader, {
    title: walletName,
    actionIcon: /*#__PURE__*/React.createElement(CopyIcon, {
      width: 22,
      height: 22,
      fill: Theme.accent
    }),
    onActionPress: onCopyClipboard ? onCopy : undefined
  }), /*#__PURE__*/React.createElement(View, {
    style: [styles.walletContainer, {
      backgroundColor: Theme.background1
    }]
  }, /*#__PURE__*/React.createElement(WalletLoadingThumbnail, {
    showError: pairingError
  }, /*#__PURE__*/React.createElement(WalletImage, {
    url: imageUrl,
    size: "lg"
  })), /*#__PURE__*/React.createElement(Text, {
    style: [styles.continueText, {
      color: pairingError ? Theme.negative : Theme.foreground1
    }]
  }, pairingError ? 'Connection declined' : `Continue in ${walletName}...`)), /*#__PURE__*/React.createElement(View, {
    style: [styles.footer, {
      backgroundColor: Theme.background2
    }]
  }, retryButtonTemplate(), storeButtonTemplate()));
}
export default ConnectingView;
//# sourceMappingURL=index.js.map