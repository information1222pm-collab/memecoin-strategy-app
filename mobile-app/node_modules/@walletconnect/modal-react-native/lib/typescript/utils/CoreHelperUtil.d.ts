import type { CaipAddress, DataWallet } from '../types/controllerTypes';
export declare const CoreHelperUtil: {
    isPairingExpired(expiry?: number): boolean;
    isAllowedRetry(lastRetry: number): boolean;
    getPairingExpiry(): number;
    getPlainAddress(caipAddress: CaipAddress): string | undefined;
    wait(milliseconds: number): Promise<unknown>;
    debounce(func: (...args: any[]) => unknown, timeout?: number): (...args: unknown[]) => void;
    isHttpUrl(url: string): boolean;
    formatNativeUrl(appUrl: string, wcUri: string): string;
    formatUniversalUrl(appUrl: string, wcUri: string): string;
    openLink(url: string): Promise<any>;
    formatBalance(balance: string | undefined, symbol: string | undefined, decimals?: number): string;
    isRestrictedRegion(): boolean;
    getApiUrl(): "https://api.web3modal.org" | "https://api.web3modal.com";
    getBlockchainApiUrl(): "https://rpc.walletconnect.org" | "https://rpc.walletconnect.com";
    checkInstalled(wallet: DataWallet): Promise<boolean>;
    isArray<T>(data?: T | T[] | undefined): data is T[];
};
//# sourceMappingURL=CoreHelperUtil.d.ts.map